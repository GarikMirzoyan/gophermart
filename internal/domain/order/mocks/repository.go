// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	order "github.com/GarikMirzoyan/gophermart/internal/domain/order"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: ctx, _a1
func (_m *Repository) AddOrder(ctx context.Context, _a1 *order.Order) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderOwner provides a mock function with given fields: ctx, number
func (_m *Repository) GetOrderOwner(ctx context.Context, number string) (int, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderOwner")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, number)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByUser provides a mock function with given fields: ctx, userID
func (_m *Repository) GetOrdersByUser(ctx context.Context, userID int) ([]*order.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByUser")
	}

	var r0 []*order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*order.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*order.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersForProcessing provides a mock function with given fields: ctx
func (_m *Repository) GetOrdersForProcessing(ctx context.Context) ([]*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersForProcessing")
	}

	var r0 []*order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccrual provides a mock function with given fields: ctx, orderNumber, status, accrual
func (_m *Repository) UpdateAccrual(ctx context.Context, orderNumber string, status string, accrual float64) error {
	ret := _m.Called(ctx, orderNumber, status, accrual)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccrual")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) error); ok {
		r0 = rf(ctx, orderNumber, status, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, orderNumber, status
func (_m *Repository) UpdateStatus(ctx context.Context, orderNumber string, status string) error {
	ret := _m.Called(ctx, orderNumber, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, orderNumber, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
