// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	loyalty "github.com/GarikMirzoyan/gophermart/internal/loyalty"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetAccrual provides a mock function with given fields: ctx, orderNumber
func (_m *Client) GetAccrual(ctx context.Context, orderNumber string) (*loyalty.OrderAccrual, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetAccrual")
	}

	var r0 *loyalty.OrderAccrual
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*loyalty.OrderAccrual, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *loyalty.OrderAccrual); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*loyalty.OrderAccrual)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
