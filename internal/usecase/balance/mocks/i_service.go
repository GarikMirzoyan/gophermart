// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domainbalance "github.com/GarikMirzoyan/gophermart/internal/domain/balance"
	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: ctx, userID, amount
func (_m *IService) AddBalance(ctx context.Context, userID int, amount float64) error {
	ret := _m.Called(ctx, userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for AddBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) error); ok {
		r0 = rf(ctx, userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *IService) GetBalance(ctx context.Context, userID int) (*domainbalance.Balance, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *domainbalance.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domainbalance.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domainbalance.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainbalance.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
